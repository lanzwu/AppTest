package utils.view;

import android.content.Context;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Message;
import android.support.v7.widget.AppCompatImageView;
import android.util.Log;
import android.view.MotionEvent;

import com.android.xdftest.PenTest;


/**
 * Created by zhouxiangyu on 2018/2/7.
 */

public class PenTestView extends AppCompatImageView {
    PointF point = new PointF();
    PointF hover = new PointF();
    public PenTestView(Context context) {
        super(context);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                point.set(event.getX(), event.getY());
                break;
            case MotionEvent.ACTION_MOVE:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if(canSendMessage(point,event.getX(),event.getY())){
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result","笔触屏移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","笔触屏移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }else{
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result","笔触屏静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","笔触屏静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                }
                break;
            case MotionEvent.ACTION_UP:
                break;
        }
        return true;
    }

    @Override
    public boolean onHoverEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_HOVER_ENTER:
                hover.set(event.getX(), event.getY());
                break;
            case MotionEvent.ACTION_HOVER_MOVE:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if(canSendMessage(hover,event.getX(),event.getY())){
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result","笔悬空移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","笔悬空移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }else{
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result","笔悬空静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","笔悬空静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                }else if(event.getToolType(0) == MotionEvent.TOOL_TYPE_ERASER){
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if(canSendMessage(hover,event.getX(),event.getY())){
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_SECONDARY) {
                            bundle.putString("result","橡皮移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","橡皮移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }else{
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_SECONDARY) {
                            bundle.putString("result","橡皮静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result","橡皮静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                }
                break;
            case MotionEvent.ACTION_HOVER_EXIT:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    bundle.putString("result","电磁笔悬空离开");
                    message.setData(bundle);
                    PenTest.handler.handleMessage(message);
                }else if(event.getToolType(0) == MotionEvent.TOOL_TYPE_ERASER){
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    bundle.putString("result","橡皮离开");
                    message.setData(bundle);
                    PenTest.handler.handleMessage(message);
                }
                break;
        }

        return super.onHoverEvent(event);
    }

    private boolean canSendMessage(PointF start, float x, float y) {
        return (Math.sqrt((x-start.x)*(x-start.x)+(y-start.y)*(y-start.y)) >= 100);
    }
}
