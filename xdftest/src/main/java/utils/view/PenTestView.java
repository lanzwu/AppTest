package utils.view;

import android.content.Context;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Message;
import android.support.v7.widget.AppCompatImageView;
import android.util.Log;
import android.view.MotionEvent;

import com.android.xdftest.PenTest;

import java.util.LinkedList;


/**
 * Created by zhouxiangyu on 2018/2/7.
 */

public class PenTestView extends AppCompatImageView {
    PointF point = new PointF();
    PointF hover = new PointF();

    public PenTestView(Context context) {
        super(context);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                point.set(event.getX(), event.getY());
                break;
            case MotionEvent.ACTION_MOVE:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if (canSendMessage(event.getX(), event.getY(), false)) {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result", "笔触屏移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "笔触屏移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    } else {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result", "笔触屏静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "笔触屏静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                    point.set(event.getX(), event.getY());
                }
                break;
            case MotionEvent.ACTION_UP:
                point.set(0, 0);
                break;
        }
        return true;
    }

    @Override
    public boolean onHoverEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_HOVER_ENTER:
                hover.set(event.getX(), event.getY());
                break;
            case MotionEvent.ACTION_HOVER_MOVE:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if (canSendMessage(event.getX(), event.getY(), true)) {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result", "笔悬空移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "笔悬空移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    } else {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_PRIMARY) {
                            bundle.putString("result", "笔悬空静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "笔悬空静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                } else if (event.getToolType(0) == MotionEvent.TOOL_TYPE_ERASER) {
                    Log.d("zhouxiangyu", "" + event.getButtonState());
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    if (canSendMessage(event.getX(), event.getY(), true)) {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_SECONDARY) {
                            PenTest.exit.setClickable(false);
                            bundle.putString("result", "橡皮移动+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "橡皮移动");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    } else {
                        if (event.getButtonState() == MotionEvent.BUTTON_STYLUS_SECONDARY) {
                            PenTest.exit.setClickable(false);
                            bundle.putString("result", "橡皮静止+按键");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        } else {
                            bundle.putString("result", "橡皮静止");
                            message.setData(bundle);
                            PenTest.handler.handleMessage(message);
                        }
                    }
                }
                hover.set(event.getX(), event.getY());
                break;
            case MotionEvent.ACTION_HOVER_EXIT:
                if (event.getToolType(0) == MotionEvent.TOOL_TYPE_STYLUS) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    bundle.putString("result", "电磁笔悬空离开");
                    message.setData(bundle);
                    PenTest.handler.handleMessage(message);
                } else if (event.getToolType(0) == MotionEvent.TOOL_TYPE_ERASER && event.getPointerCount() == 1) {
                    Message message = new Message();
                    Bundle bundle = new Bundle();
                    bundle.putString("result", "橡皮离开");
                    message.setData(bundle);
                    PenTest.handler.handleMessage(message);
                    PenTest.exit.setClickable(true);
                }
                hover.set(0, 0);
                break;
        }

        return super.onHoverEvent(event);
    }

    private boolean canSendMessage(final float x, final float y, final boolean isHoverEvent) {
        double distance;
        if (!isHoverEvent) {
            distance = Math.sqrt((x - point.x) * (x - point.x) + (y - point.y) * (y - point.y));
        } else {
            distance = Math.sqrt((x - hover.x) * (x - hover.x) + (y - hover.y) * (y - hover.y));
        }
        return distance / 23 >= 0.09;

    }
}
